plugins {
	id "org.springframework.boot.catalog"
	id "org.springframework.boot.conventions"
	id "org.springframework.boot.deployed"
}

description = "Spring Boot Dependency Catalog"

catalog {
	versionCatalog {
		version("springBoot", "${-> project.version}")
		plugin("springBoot", "org.springframework.boot").versionRef("springBoot")
		library("springBootDependencies", "org.springframework.boot", "spring-boot-dependencies").versionRef("springBoot")
		[
				"spring-boot",
				"spring-boot-test",
				"spring-boot-test-autoconfigure",
				"spring-boot-testcontainers",
				"spring-boot-actuator",
				"spring-boot-actuator-autoconfigure",
				"spring-boot-autoconfigure",
				"spring-boot-autoconfigure-processor",
				"spring-boot-buildpack-platform",
				"spring-boot-configuration-metadata",
				"spring-boot-configuration-processor",
				"spring-boot-devtools",
				"spring-boot-docker-compose",
				"spring-boot-jarmode-layertools",
				"spring-boot-loader",
				"spring-boot-loader-classic",
				"spring-boot-loader-tools",
				"spring-boot-properties-migrator",
				"spring-boot-starter",
				"spring-boot-starter-activemq",
				"spring-boot-starter-actuator",
				"spring-boot-starter-amqp",
				"spring-boot-starter-aop",
				"spring-boot-starter-artemis",
				"spring-boot-starter-batch",
				"spring-boot-starter-cache",
				"spring-boot-starter-data-cassandra",
				"spring-boot-starter-data-cassandra-reactive",
				"spring-boot-starter-data-couchbase",
				"spring-boot-starter-data-couchbase-reactive",
				"spring-boot-starter-data-elasticsearch",
				"spring-boot-starter-data-jdbc",
				"spring-boot-starter-data-jpa",
				"spring-boot-starter-data-ldap",
				"spring-boot-starter-data-mongodb",
				"spring-boot-starter-data-mongodb-reactive",
				"spring-boot-starter-data-r2dbc",
				"spring-boot-starter-data-redis",
				"spring-boot-starter-data-redis-reactive",
				"spring-boot-starter-data-neo4j",
				"spring-boot-starter-data-rest",
				"spring-boot-starter-freemarker",
				"spring-boot-starter-graphql",
				"spring-boot-starter-groovy-templates",
				"spring-boot-starter-hateoas",
				"spring-boot-starter-integration",
				"spring-boot-starter-jdbc",
				"spring-boot-starter-jersey",
				"spring-boot-starter-jetty",
				"spring-boot-starter-jooq",
				"spring-boot-starter-json",
				"spring-boot-starter-log4j2",
				"spring-boot-starter-logging",
				"spring-boot-starter-mail",
				"spring-boot-starter-mustache",
				"spring-boot-starter-oauth2-authorization-server",
				"spring-boot-starter-oauth2-client",
				"spring-boot-starter-oauth2-resource-server",
				"spring-boot-starter-pulsar",
				"spring-boot-starter-pulsar-reactive",
				"spring-boot-starter-quartz",
				"spring-boot-starter-reactor-netty",
				"spring-boot-starter-rsocket",
				"spring-boot-starter-security",
				"spring-boot-starter-test",
				"spring-boot-starter-thymeleaf",
				"spring-boot-starter-tomcat",
				"spring-boot-starter-undertow",
				"spring-boot-starter-validation",
				"spring-boot-starter-web",
				"spring-boot-starter-webflux",
				"spring-boot-starter-websocket",
				"spring-boot-starter-web-services"
		].each { module ->
			def parts = module.split("-")
			def alias
			if (parts.length > 1) {
				alias = parts[0] + parts[1..-1].collect {
					it.capitalize()
				}.join("")
			} else {
				alias = parts[0]
			}
			library(alias, "org.springframework.boot", module).withoutVersion()
		}
	}
}
